package com.example.dllo.project_a_cst.my_database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_PERSON".
*/
public class MyPersonDao extends AbstractDao<MyPerson, Long> {

    public static final String TABLENAME = "MY_PERSON";

    /**
     * Properties of entity MyPerson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MusicName = new Property(1, String.class, "musicName", false, "MUSIC_NAME");
        public final static Property Singer = new Property(2, String.class, "Singer", false, "SINGER");
        public final static Property MusicId = new Property(3, String.class, "musicId", false, "MUSIC_ID");
        public final static Property MusicUrl = new Property(4, String.class, "musicUrl", false, "MUSIC_URL");
    }


    public MyPersonDao(DaoConfig config) {
        super(config);
    }
    
    public MyPersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_PERSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MUSIC_NAME\" TEXT," + // 1: musicName
                "\"SINGER\" TEXT," + // 2: Singer
                "\"MUSIC_ID\" TEXT," + // 3: musicId
                "\"MUSIC_URL\" TEXT);"); // 4: musicUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_PERSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MyPerson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String musicName = entity.getMusicName();
        if (musicName != null) {
            stmt.bindString(2, musicName);
        }
 
        String Singer = entity.getSinger();
        if (Singer != null) {
            stmt.bindString(3, Singer);
        }
 
        String musicId = entity.getMusicId();
        if (musicId != null) {
            stmt.bindString(4, musicId);
        }
 
        String musicUrl = entity.getMusicUrl();
        if (musicUrl != null) {
            stmt.bindString(5, musicUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MyPerson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String musicName = entity.getMusicName();
        if (musicName != null) {
            stmt.bindString(2, musicName);
        }
 
        String Singer = entity.getSinger();
        if (Singer != null) {
            stmt.bindString(3, Singer);
        }
 
        String musicId = entity.getMusicId();
        if (musicId != null) {
            stmt.bindString(4, musicId);
        }
 
        String musicUrl = entity.getMusicUrl();
        if (musicUrl != null) {
            stmt.bindString(5, musicUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MyPerson readEntity(Cursor cursor, int offset) {
        MyPerson entity = new MyPerson( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // musicName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Singer
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // musicId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // musicUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MyPerson entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMusicName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSinger(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMusicId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMusicUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MyPerson entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MyPerson entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MyPerson entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
